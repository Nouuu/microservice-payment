/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import io.swagger.annotations.*;
import org.openapitools.model.Payment;
import org.openapitools.model.PaymentResponse;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-05-24T21:19:14.382432600+02:00[Europe/Paris]")
@Validated
@Api(value = "payment", description = "the payment API")
public interface PaymentApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /payment : Process payment
     * Create payment functionality
     *
     * @param body Created payment object (optional)
     * @return Payment succeeded (status code 200)
     * or Payment failed (status code 400)
     */
    @ApiOperation(value = "Process payment", nickname = "createPayment", notes = "Create payment functionality", response = PaymentResponse.class, tags = {"payment",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Payment succeeded", response = PaymentResponse.class),
            @ApiResponse(code = 400, message = "Payment failed", response = PaymentResponse.class)})
    @PostMapping(
            value = "/payment",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default ResponseEntity<PaymentResponse> createPayment(@ApiParam(value = "Created payment object") @Valid @RequestBody(required = false) Payment body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"checkout_id\" : \"f8a8c8e7-b8b6-4b8b-8b8b-8b8b8b8b8b8b\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /payment/{checkout_id} : Delete payment by checkout id
     * Delete payment by checkout id
     *
     * @param checkoutId Checkout id (required)
     * @return successful operation (status code 204)
     * or Payment not found (status code 404)
     */
    @ApiOperation(value = "Delete payment by checkout id", nickname = "deletePaymentByCheckoutId", notes = "Delete payment by checkout id", tags = {"payment",})
    @ApiResponses(value = {
            @ApiResponse(code = 204, message = "successful operation"),
            @ApiResponse(code = 404, message = "Payment not found")})
    @DeleteMapping(
            value = "/payment/{checkout_id}"
    )
    default ResponseEntity<Void> deletePaymentByCheckoutId(@ApiParam(value = "Checkout id", required = true) @PathVariable("checkout_id") UUID checkoutId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /payment/{checkout_id} : Get payment by checkout id
     * Get payment by checkout id
     *
     * @param checkoutId Checkout id (required)
     * @return successful operation (status code 200)
     * or Payment not found (status code 404)
     */
    @ApiOperation(value = "Get payment by checkout id", nickname = "getPaymentByCheckoutId", notes = "Get payment by checkout id", response = Payment.class, tags = {"payment",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Payment.class),
            @ApiResponse(code = 404, message = "Payment not found")})
    @GetMapping(
            value = "/payment/{checkout_id}",
            produces = {"application/json"}
    )
    default ResponseEntity<Payment> getPaymentByCheckoutId(@ApiParam(value = "Checkout id", required = true) @PathVariable("checkout_id") UUID checkoutId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"checkout_id\" : \"f8a8c8e7-b8b6-4b8b-8b8b-8b8b8b8b8b8b\", \"payment_orders\" : [ { \"amount\" : 10.5, \"currency\" : \"EUR\", \"seller_account\" : \"John Doe\", \"payment_order_id\" : \"f8a8c8e7-b8b6-4b8b-8b8b-8b8b8b8b8b8b\" }, { \"amount\" : 10.5, \"currency\" : \"EUR\", \"seller_account\" : \"John Doe\", \"payment_order_id\" : \"f8a8c8e7-b8b6-4b8b-8b8b-8b8b8b8b8b8b\" } ], \"buyer_info\" : { \"name\" : \"John Doe\", \"id\" : \"f8a8c8e7-b8b6-4b8b-8b8b-8b8b8b8b8b8b\" }, \"credit_card_info\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /payment : Get succeeded payments
     * Get succeeded payments that has been processed
     *
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Get succeeded payments", nickname = "getSucceededPayments", notes = "Get succeeded payments that has been processed", response = Payment.class, responseContainer = "List", tags = {"payment",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Payment.class, responseContainer = "List")})
    @GetMapping(
            value = "/payment",
            produces = {"application/json"}
    )
    default ResponseEntity<List<Payment>> getSucceededPayments() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"checkout_id\" : \"f8a8c8e7-b8b6-4b8b-8b8b-8b8b8b8b8b8b\", \"payment_orders\" : [ { \"amount\" : 10.5, \"currency\" : \"EUR\", \"seller_account\" : \"John Doe\", \"payment_order_id\" : \"f8a8c8e7-b8b6-4b8b-8b8b-8b8b8b8b8b8b\" }, { \"amount\" : 10.5, \"currency\" : \"EUR\", \"seller_account\" : \"John Doe\", \"payment_order_id\" : \"f8a8c8e7-b8b6-4b8b-8b8b-8b8b8b8b8b8b\" } ], \"buyer_info\" : { \"name\" : \"John Doe\", \"id\" : \"f8a8c8e7-b8b6-4b8b-8b8b-8b8b8b8b8b8b\" }, \"credit_card_info\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
